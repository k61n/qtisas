# **************************************************************************** #
# Project: QtiSAS
# License: GNU GPL Version 3 (see LICENSE)
# Copyright (C) by the authors:
#     2023 Konstantin Kholostov <k.kholostov@fz-juelich.de>
# Description: build sip files
# **************************************************************************** #

import os
import platform
import subprocess
import sys
import venv


file = os.path.abspath(__file__)
qtisas_root = os.path.dirname(os.path.dirname(file))
ext = '.exe' if platform.system() == 'Windows' else ''


def find_resource(resource, paths):
    for path in paths:
        for root, dirs, filenames in os.walk(path):
            for filename in filenames:
                if filename == resource:
                    return os.path.join(root, filename)


def version(v):
    """Convert version string of X.Y.Z to tuple of ints (X, Y, Z)."""
    return tuple(map(int, v.split(".")))


def next_minor(v):
    """Return next minor version for a version string X.Y.Z."""
    v = version(v)
    return (v[0], v[1] + 1, 0)


def get_pyqt_versions(pipexe, qtv):
    """Return proper PyQtX and PyQtX-QtX versions."""

    pyqt = subprocess.check_output(f'{pipexe} index versions pyqt{version(qtv)[0]}',
                                   shell=True, text=True)
    for line in pyqt.split('\n'):
        if 'Available versions: ' in line:
            pyqt = line.split('Available versions: ')[1].split(', ')
            break
    pyqtqt = subprocess.check_output(f'{pipexe} index versions pyqt{version(qtv)[0]}-qt{version(qtv)[0]}',
                                     shell=True, text=True)
    for line in pyqtqt.split('\n'):
        if 'Available versions: ' in line:
            pyqtqt = line.split('Available versions: ')[1].split(', ')
            break
    pyqtv, pyqtqtv = None, None
    for v in pyqt:
        if version(v) <= version(qtv) and version(v) < next_minor(qtv):
            pyqtv = v
            break
    for v in pyqtqt:
        if version(v) <= version(qtv) and version(v) < next_minor(qtv):
            pyqtqtv = v
            break
    return pyqtv, pyqtqtv


def sip():
    """Assuming python already has sip>=5 package"""

    build_path = sys.argv[1]
    qmake_path = sys.argv[2]
    qtv = sys.argv[3]
    # checks if the files are already built
    if os.path.exists(os.path.join(build_path, 'sip', 'sip.h')):
        print('Sip files are already generated.\n')
        return

    if platform.system() == 'Linux':
        sipexe = find_resource('sip-build', ['/usr'])
        sip_includes = os.path.dirname(os.path.dirname(find_resource('QtCoremod.sip', ['/usr'])))
    else:
        print(f'\nCreating a venv to build sip files:')
        venv_root = os.path.join(qtisas_root, 'bin', 'venv')
        venv.create(venv_root, with_pip=True)
        pipexe = find_resource('pip3' + ext, [venv_root])
        pyqt, pyqtqt = get_pyqt_versions(pipexe, qtv)
        subprocess.run(
            f'{pipexe} install pyqt{version(qtv)[0]}=={pyqt} PyQt{version(qtv)[0]}-Qt{version(qtv)[0]}=={pyqtqt} pyqt-builder setuptools sip',
            shell=True
        )
        sipexe = find_resource('sip-build' + ext, [venv_root])
        sip_includes = find_resource('QtCoremod.sip', [venv_root])
        sip_includes = os.path.dirname(os.path.dirname(sip_includes))
        if platform.system() == 'Windows':
            sip_includes = sip_includes.replace('\\', '/')

    sipversion = subprocess.check_output(f'{sipexe} -V', shell=True, text=True)
    pyproject = f'''
# **************************************************************************** #
# Project: QtiSAS
# License: GNU GPL Version 3 (see LICENSE)
# Copyright (C) by the authors:
#     2023 Konstantin Kholostov <k.kholostov@fz-juelich.de>
# Description: sip project file generated by scripts/sip_generate.py
# **************************************************************************** #

[build-system]
requires = ["sip >=5, <8", "PyQt-builder >=1.6, <2", "PyQt{version(qtv)[0]}"]
build-backend = "sipbuild.api"

[{'tool.sip.metadata' if version(sipversion) < version('6.8') else 'project'}]
name = "qti"

[tool.sip]
project-factory = "pyqtbuild:PyQtProject"

[tool.sip.project]
sip-include-dirs = ["{sip_includes}"]
'''

    with open(os.path.join(qtisas_root, 'qtisas', 'python', 'pyproject.toml'),
              'w') as f:
        f.write(pyproject)

    # executes sip-build
    os.makedirs(os.path.join(build_path, 'sip'), exist_ok=True)
    buildflag = '--no-compile' if version(sipversion) >= version('6') else '--no-make'
    sipcmd = f'{sipexe} {buildflag} --qmake {qmake_path} --build-dir {os.path.join(build_path, "sip")}'
    subprocess.run(sipcmd, shell=True, cwd=os.path.join(qtisas_root, 'qtisas', 'python'))


if __name__ == '__main__':
    sip()
